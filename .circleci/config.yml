defaults: &defaults
  docker: 
    - image: circleci/node:13.8.0

version: 2.1

commands:
  destory_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_name:
        type: string
    steps: 
      - run: 
          name: Destroy environment 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack_name>>

jobs: 
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - run: 
          name: frontend build
          command: |
            cd frontend
            npm install
            npm run build

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - run: 
          name: backend build
          command: |
            cd backend
            npm install
            npm run build

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - run: 
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - run: 
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - run: 
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  
  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - run: 
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar gzip 
          command: |
              yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --filters "Name=tag:Name,Values=${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text >> project/.circleci/ansible/inventory.txt
      - run: 
          name: print inventory file
          command: |
            cat project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      - destory_environment:
          stack_name: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - destory_environment:
          stack_name: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]